{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"/]+|(?!\\b)(?=[A-Z][a-z])|\\.(?!\\d)|&[lg]t;","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Guides Home","text":"<p>We can now have abbreviations like this rA or this RO .</p> <p>Note</p> <p>This is a non collapsable note.</p> CC++ <pre><code>#include &lt;stdio.h&gt;\nint main(void) {\nprintf(\"Hello world!\\n\");\nreturn 0;\n}\n</code></pre> <pre><code>#include &lt;iostream&gt;\nint main(void) {\nstd::cout &lt;&lt; \"Tu mam\u00e1 jjejejjeje!\" &lt;&lt; std::endl;\nreturn 0;\n}\n</code></pre> <p>Warningeru</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>  xD <p>(Se hace la que no me conoce)</p> <p>(Pero en mi cama se volvi\u00f3 un vicio como a las cinco doce)</p> <p>(Yeah, yeah, yeah, yeah)</p> <p>Nunca se deja ver (Nunca se deja ver)</p> <p>No sabe disimular (No sabe disimular)</p> <p>mark me</p> <p>smart==mark</p> <p>Ctrl+Alt+Del</p> <p>Alt+F4</p> <p>inline color: <code>import pymdownx; pymdownx.__version__</code>.</p> \u00a9 <p>It doesn't render on the footer copyright msg tho &lt;:(</p> <p>\u00ae \u2122</p> <p>Task List</p> <ul> <li> item 1<ul> <li> item A</li> <li> item B     more text<ul> <li> item a</li> <li> item b</li> <li> item c</li> </ul> </li> <li> item C</li> </ul> </li> <li> item 2</li> <li> item 3</li> </ul>"},{"location":"#hello-what","title":"Hello~! What?!","text":"<p>Welcome to User Guides, the community driven guidebook for rAthena. This is a place where you can find guides on how to install, configure, and use rAthena. If you have any questions, feel free to ask in the rAthena Forums or our Discord server.</p>"},{"location":"#why-should-i-use-this","title":"Why Should I Use This?","text":"<p>This area of rAthena has been created by the community, for the community. If you have a guide you would like to share with the community, you can submit a pull request to the rAthena User-Guides Repository on GitHub. Due to the nature of how Github Wiki's work (and their access requirements for modifying them), we have decided to move our guides to a repository instead. This will allow us to have more control over the content and have a more streamlined process for submitting and reviewing guides. We hope you enjoy this new format, and we look forward to seeing your contributions!</p>"},{"location":"#what-about-the-old-guides","title":"What About The Old Guides?","text":"<p>Guides that are currently located on the rA Wiki will slowly migrate over to here. If you are looking for a guide that is not yet on this site, you can find it on the rAthena Wiki.</p> <p>There are a multitude of guides available on the forums, too, though many are extremely out-of-date and contain links to dead resources. Their authors may no longer be on the scene, which makes keeping them up-to-date a difficult task. This is why we encourage users to now make their guides available here, where they can be kept up-to-date and easily accessibleby everyone.</p>"},{"location":"#how-do-i","title":"How Do I?...","text":""},{"location":"#how-do-i-use-this","title":"How Do I Use This?","text":"<p>This guidebook is split into several sections for ease-of-use. Simply click around and follow links to where you need to go, or try searching for what you need using the search bar at the top of the page.</p>"},{"location":"#how-do-i-contribute","title":"How Do I Contribute?","text":"<p>If you have a guide you would like to share with the community, you can submit a pull request to the rAthena User-Guides Repository on GitHub. Have a look at our CONTRIBUTING.md file for an in-depth process.</p> <p>If you are unfamiliar with Markdown, you can use StackEdit to write your guide in Markdown, or use the GitHub Markdown Editor to preview your guide as you write it.</p>"},{"location":"#how-do-i-get-help","title":"How Do I Get Help?","text":"<p>If you have any questions about these guides, or feel that any of them need clarifying, feel free to shoot a message into the <code>#user-guides</code> channel on our Discord server.</p>"},{"location":"#how-do-i-use-these-guides-offline","title":"How Do I Use These Guides Offline?","text":"<p>You sure can! Download this package from GitHub, and you will have a copy of all the guides available for offline use. You can also clone the repository using Git, if you prefer.</p>"},{"location":"debugging/","title":"MSVS Debugging","text":"<p>Did you ever see yourself placing <code>ShowDebug</code> everywhere in the code with comments like <code>Been here</code>, <code>If ok</code> and etc, just for trying to understand why your new groundbreaking feature isn't working correctly? The solution is called breakpoints.</p>"},{"location":"debugging/#what-is-debugging","title":"What is debugging?","text":"<p>Simply put, debugging is the ability to put breakpoints in your code and when the server takes that given path it will pause the rest of the execution. This allows you to inspect variable values, evaluate expressions directly on the <code>Immediate Window</code>, and more.</p>"},{"location":"debugging/#video","title":"Video","text":"<p>For the visual learners, I've recorded this video. It's using VS2019 but should work with any version.</p> <p></p>"},{"location":"debugging/#setup","title":"Setup","text":"<ol> <li>Once you have your solution opened with Visual Studio, open up the Solution Explorer and look for a folder called <code>server-components</code>.</li> <li>Then you right click the <code>map-server</code> and select <code>Set as Startup Project</code>.</li> <li>Next you will need to right click the <code>map-server</code> once again and this time open the <code>Properties</code> window.</li> <li>On the left menu, select <code>Debugging</code>. Then on the right side panel, under <code>Work Directory</code>, change to <code>$(SolutionDir)</code></li> <li>Hit apply, then Ok.</li> <li>Compile the solution.</li> <li>Now you should be able to separately start your <code>login-server</code> and <code>char-server</code>.</li> <li>Once these are up, go back to Visual Studio and click the Play button at the top or hit F5 on the keyboard.</li> <li>Go to any function in the <code>map-server</code> source code and put a breakpoint on any line. Trigger that line of code from the client.</li> <li>Your client should now be frozen. The Visual Studio window should have taken the focus and you should see the line you selected/highlighted. You can now inspect the variables (go forward with F10, release with F5, and so on).</li> </ol>"},{"location":"debugging/#tracing-code-path","title":"Tracing code path","text":"<p>Many times we need to know how did we end up in a given code path or method. For that we use the IDE to show us all the references to any given variable, method, etc. Sometimes there are so many calls to what we want to trace it becomes difficult to analyse.</p> <p>This is when breakpoints and the <code>Call Stack</code> window come to place.</p> <p>Once your code is stopped at any breakpoint, you should see at the bottom a window called <code>Call Stack</code>. Those items in the list are from top to bottom, the order of execution the code has taken until the line you put a breakpoint.</p>"},{"location":"debugging/#taking-breakpoints-a-bit-further","title":"Taking breakpoints a bit further","text":"<p>Using breakpoints sometimes can cause some harm, for instance, when you're debugging something that happens very quickly and in rapid succession. You'll have no time of ALT-Tab'ing back and forth between server and client because the server will be always paused on the breakpoint.</p> <p>In that case, you can right-click on a breakpoint and select either <code>Conditions...</code> or <code>Actions...</code>.</p> <ul> <li>Conditions You can choose a condition to trigger the breakpoint. Let's say you want it to stop only when a certain skill is triggered, just put the evaluation there. Eg: <code>md-&gt;skillid == 1234</code>. Note: this is extremely slow.</li> <li>Actions Instead of actually pausing the execution you can use this to execute a piece of code whenever a breakpoint is hit. Rather than having to recompile to add a simple log, you can use this to add logs at will without the impact of the Conditional Breakpoints. In order for the breakpoint not stop the code execution you will need to tick the checkbox right below the text field, something like <code>Continue code execution</code>.</li> </ul>"},{"location":"debugging/#anything-missing","title":"Anything missing?","text":"<p>Should you have any questions, don't hesitate to ask questions at our Discord. We'll be happy to help.</p>"},{"location":"extensions/","title":"Extensions","text":"<p>Here is a small list of currently supported extensions, widgets and apps provided by the rAthena Dev Team.</p>"},{"location":"extensions/#extensions","title":"Extensions","text":""},{"location":"extensions/#visual-studio-code","title":"Visual Studio Code","text":""},{"location":"extensions/#rathena-language-support","title":"rAthena Language Support","text":"<p>Visual Studio Marketplace | GitHub</p> <p>This extension adds syntax highlighting to NPC scripts. Select \"rAthena\" via the Language Mode selector in the bottom right corner of the editor to enable it, or save your NPC scripts with the .rascript extension for automatic detection.</p> <p>This extension was initially ported from JoWei's language-athena for Atom editor and published via VS Marketplace by secretdataz, a member of the rAthena Dev Team. The repository was then archived and is no longer maintained. This extension is now maintained by the rAthena Dev Team.</p>"},{"location":"installing/","title":"General","text":""},{"location":"installing/#containers-and-vms","title":"Containers and VMs","text":"<ul> <li>Docker</li> </ul>"},{"location":"installing/#operating-system","title":"Operating System","text":"<ul> <li>CentOS</li> <li>Ubuntu</li> <li>Debian</li> <li>FreeBSD</li> <li>Windows</li> </ul> <p>Or are you just looking for the MySQL Installation guide?</p>"},{"location":"installing/#optional-clone-information","title":"Optional Clone Information","text":"<p>If you want to have your own forked version but still get updates from the main rAthena repository</p> <ul> <li>Fork this repository to your GitHub account</li> <li> <p>List the current configured remote repository for your fork:</p> <pre><code>git remote -v\n</code></pre> </li> <li> <p>Specify a new remote upstream repository that will be synced with your fork:</p> <pre><code>git remote add upstream https://github.com/rathena/rathena.git\n</code></pre> </li> <li> <p>Verify the new upstream repository you've specified for your fork:</p> <pre><code>git remote -v\n</code></pre> </li> <li> <p>You should see the main rAthena repository as well as your forked repository</p> </li> <li> <p>Now, when you want to get updates from rAthena, simply do:</p> <pre><code>git pull upstream master\n</code></pre> </li> <li> <p>Remember that rAthena falls under GNU GPLv3.</p> </li> </ul>"},{"location":"installing/debian/","title":"Debian","text":"<p>This guide covers how to install rAthena on Debian 10. For earlier versions of Debian you may need to alter the list of required packages. Older versions will not be covered in this guide.</p> <p>Code that you should run in your console/SSH application is <code>written like this</code>.</p> <p>This guide covers the installation via CLI and does not include instructions for installing a desktop environment for use with a VNC server.</p>"},{"location":"installing/debian/#pre-requisites","title":"Pre-Requisites","text":""},{"location":"installing/debian/#in-general","title":"In General","text":"<ul> <li>A basic understanding of Linux based Operating Systems.</li> <li>A basic understanding of the SSH tool Putty.</li> <li>A basic understanding of MySQL (or RDBMS in general).</li> <li>A basic understanding of when the root system user should be used, and when you should use a standard user shell.</li> <li>A basic understanding that \"if at first you don't succeed, search the forums\" will be your saving-grace in the event of errors.</li> </ul>"},{"location":"installing/debian/#debian-10","title":"Debian 10","text":"<p>You should ensure that your system is up-to-date by first: <code>apt-get update</code></p>"},{"location":"installing/debian/#installing-requirements","title":"Installing Requirements","text":"<p>We need the following applications to compile rAthena on Debian 10: <pre><code>apt-get install git make libmariadb-dev libmariadbclient-dev libmariadbclient-dev-compat gcc g++ zlib1g-dev libpcre3-dev\n</code></pre> You can install the above applications, and any following applications as root, then we'll switch to a standard user later on in the guide.</p> <p>If you don't feel comfortable editing files in Vim, you should install nano: <pre><code>apt-get install -y nano\n</code></pre></p>"},{"location":"installing/debian/#mysql","title":"MySQL","text":"<p>For the installation instructions of MySQL, please see the relevant installation page.</p>"},{"location":"installing/debian/#the-code-repository","title":"The Code Repository","text":"<p>rAthena uses git for revision control, and hosts the git repository on Github.</p>"},{"location":"installing/debian/#cloning","title":"Cloning","text":"<p>You can obtain the latest version of rAthena by typing the following command. This will place rAthena in a folder called rAthena in your home directory, but you are free to change it to whatever you like:</p> <pre><code>git clone https://github.com/rathena/rathena.git ~/rAthena\n</code></pre>"},{"location":"installing/debian/#updating","title":"Updating","text":"<p>To pull the latest updates for rAthena you can do the following: <pre><code>git pull\n</code></pre></p>"},{"location":"installing/debian/#compile-the-code","title":"Compile The Code","text":"<p>There are several steps you will need to do now in order to run rAthena. You first need to run the \"configure script\" to ensure everything is working as it should, and to build necessary make-files. <pre><code>./configure\n</code></pre></p> <p>The next command is not essential every time you compile, but it helps to ensure caches are removed when compiling. <pre><code>make clean\n</code></pre></p> <p>And then finally, we're going to build the server's code. <pre><code>make server\n</code></pre></p> <p>Potentially, you may need to <code>chmod</code> your server binaries to make them \"executable\". <pre><code>chmod a+x login-server &amp;&amp; chmod a+x char-server &amp;&amp; chmod a+x map-server &amp;&amp; chmod a+x web-server\n</code></pre></p>"},{"location":"installing/debian/#recompile-the-code","title":"Recompile The Code","text":"<p>Recompiling is the same as compiling. You can throw the code into a one-liner, if you like. <pre><code>./configure &amp;&amp; make clean &amp;&amp; make server\n</code></pre></p>"},{"location":"installing/debian/#starting-rathena","title":"Starting rAthena","text":"<p>The provided method of running rAthena will work perfectly fine, but this author's personal preference is shown below as an alternative method.</p>"},{"location":"installing/debian/#provided-method","title":"Provided Method","text":"<p>Use the following commands</p> <ul> <li> <p>To Start: <pre><code>./athena-start start\n</code></pre></p> </li> <li> <p>To Stop: <pre><code>./athena-start stop\n</code></pre></p> </li> <li> <p>To Restart: <pre><code>./athena-start restart\n</code></pre></p> </li> </ul> <p>If you receive an error similar to the following: <pre><code>-bash: ./athena-start: /bin/sh^M: bad interpreter\n</code></pre></p> <p>You can install dos2unix with <code>apt-get install dos2unix</code> and then run <code>dos2unix athena-start</code>.</p> <p>You will now be able to use <code>./athena-start start</code> after <code>chmod a+x athena-start</code>.</p>"},{"location":"installing/debian/#alternative-method","title":"Alternative Method","text":"<p>Firstly, install <code>screen</code>: <pre><code>apt-get install -y screen\n</code></pre> You can then keep all your separate consoles running in the background, and call them forward individually whenever you like.</p> <p>First, create the sessions: <pre><code>screen -dmS login\nscreen -dmS char\nscreen -dmS map\nscreen -dmS web\n</code></pre></p> <p>Then you can connect to each one individually like so: <pre><code>screen -r login\n</code></pre> When you are inside the session, <code>cd</code> to your rAthena folder and start the login-server, e.g. <code>cd ~/rAthena &amp;&amp; ./login-server</code>. This should now start the login-server. To detach from the session while keeping the login-server running, you will need to hold down the <code>Ctrl</code> key on your keyboard and then press the <code>A</code> and <code>D</code> keys at the same time. Then, do the same to the other servers. If you want to terminate any of your servers, you will need to resume the session (<code>-r</code>) and then <code>Ctrl</code> + <code>C</code>.</p> <p>To make sure your sessions are still running, you can <code>screen -ls</code> which will output something similar to: <pre><code>[athenauser@vps-ba60c6aa ~]$ screen -ls\nThere are screens on:\n        32121.login      (Detached)\n        4146.web         (Detached)\n        4115.map         (Detached)\n        4088.char        (Detached)\n4 Sockets in /var/run/screen/S-athenauser.\n</code></pre></p>"},{"location":"installing/debian/#connections","title":"Connections","text":"<p>If you've just started your servers and get some errors, don't worry, it's because you haven't configured them yet.</p> <p>We have a handy guide here that will talk you through what you need to change in order to get your servers up and running successfully.</p>"},{"location":"installing/docker/","title":"Docker","text":"<p>This guide covers how to quickly get rAthena running on any OS by using Docker. In depth docker topics will not be covered by this guide.</p> <p>Code that you should run in your console/SSH application is <code>written like this</code>.</p>"},{"location":"installing/docker/#what-is-docker-and-why-use-it-over-a-native-installation","title":"What is Docker and why use it over a native installation?","text":"<p>One of the main benefits of Docker is the ability to replicate your environment, no matter the host OS, as you only need the Docker daemon/engine running and you're good to go.</p>"},{"location":"installing/docker/#pre-requisites","title":"Pre-Requisites","text":""},{"location":"installing/docker/#in-general","title":"In General","text":"<ul> <li>A basic understanding of Linux based Operating Systems.</li> <li>Familiarity with StackOverflow in case anything goes wrong.</li> </ul>"},{"location":"installing/docker/#installing-requirements","title":"Installing Requirements","text":"<p>First, you need to get Docker engine up and running. You can get this done by following the official Docker guides. Once you get to the part where you install <code>docker-compose</code> you're good to go.</p> <p>A few basic commands to remember:</p> <ul> <li> <p><code>docker-compose up -d</code> - This will start all the services defined in <code>docker-compose.yml</code> and detach the terminal. You can run without the <code>-d</code> to keep the logs attached.</p> </li> <li> <p><code>docker-compose down</code> - If you have previously dettached, you can run this command next to the <code>docker-compose.yml</code> file to shut every service down gracefully.</p> </li> <li> <p><code>docker logs &lt;container name&gt;</code> - Will print the last lines of logs of a given container.</p> </li> <li> <p><code>docker ps</code> - Will list all the containers you have running.</p> </li> </ul>"},{"location":"installing/docker/#understanding-the-docker-composeyml","title":"Understanding the docker-compose.yml","text":"<p>In this file you'll find how the magic really happens. Jokes aside, there's no magic, it's kinda easy once you wrap your head around it.</p> <p>Inside the <code>services</code> block, you'll find every <code>service</code> a.k.a <code>container</code> we'll start once we run our <code>up</code> command.</p>"},{"location":"installing/docker/#database","title":"Database","text":"<pre><code>    db: # service name (this is the name docker uses to communicate to this container internally\n        image: \"mariadb:bionic\" # container image (what it will be running)\n        container_name: \"rathena_db\" # the name you'll be using to get logs or bash into\n        ports: # this block will have the ports the container uses to make possible for you to connect to it from the host\n            - \"3306:3306\" # allow DB connections from host\n        volumes:\n            - \"rathenadb:/var/lib/mysql\" # save database to local disk\n            - \"../../sql-files/:/docker-entrypoint-initdb.d\" # initialize db with ./sql-files\n        environment: # environment variables. self-explanatory\n            MYSQL_ROOT_PASSWORD: ragnarok\n            MYSQL_DATABASE: ragnarok\n            MYSQL_USER: ragnarok\n            MYSQL_PASSWORD: ragnarok\n</code></pre>"},{"location":"installing/docker/#builder","title":"Builder","text":"<p>This is a special container we've created so you're able to build the source without much hassle. That's because the other services (map/char/login) will crash and exit as soon as you start them, or if the server was already compiled they will start the server and then you won't be able to finish compiling. <pre><code>    builder:\n        image: \"rathena:local\"\n        container_name: \"rathena-builder\"\n        command: \"/rathena/tools/docker/builder.sh\" # this line will run the file linked once the container has started\n        volumes:\n            - \"../..:/rathena\" # mount git repo directory inside container\n            - \"./asset/inter_conf.txt:/rathena/conf/import/inter_conf.txt\" # load db connection\n            - \"./asset/char_conf.txt:/rathena/conf/import/char_conf.txt\"   # localdev login-char relation\n            - \"./asset/map_conf.txt:/rathena/conf/import/map_conf.txt\"     # localdev char-map relation\n        init: true # helps with signal forwarding and process reaping\n        tty: true\n        stdin_open: true\n        build: # as we don't have an image available on the Docker hub for building and running rAthena, we need to build it ourselves\n            context: .\n            dockerfile: Dockerfile\n        environment:\n            BUILDER_CONFIGURE: \"--enable-packetver=20211103\" # here you can pass whatever you would pass to the `./configure` command\n</code></pre></p>"},{"location":"installing/docker/#logincharmap-servers","title":"Login/Char/Map servers","text":"<p>This part is where we define each of our executables/servers to run independently. The differences between the servers will be the <code>command</code> property which will contain the specific server that container will launch and the <code>depends_on</code> which specifies which other container should be up before initializing. <pre><code>login:\n        image: \"rathena:local\"\n        container_name: \"rathena-login\"\n        command: sh -c \"/bin/wait-for db:3306 -- /rathena/login-server\"\n        ports:\n            - \"6900:6900\" # login server\n        volumes:\n            - \"../..:/rathena\" # mount git repo directory inside container\n            - \"./asset/inter_conf.txt:/rathena/conf/import/inter_conf.txt\" # load db connection\n            - \"./asset/char_conf.txt:/rathena/conf/import/char_conf.txt\"   #localdev login-char relation\n            - \"./asset/map_conf.txt:/rathena/conf/import/map_conf.txt\"     #localdev char-map relation\n        init: true # helps with signal forwarding and process reaping\n        tty: true\n        stdin_open: true\n        build:\n            context: .\n            dockerfile: Dockerfile\n        depends_on:\n            - db\n</code></pre></p>"},{"location":"installing/docker/#setting-up-the-server","title":"Setting up the server","text":"<ol> <li> <p>After cloning the rAthena repo, you should open the project folder in the terminal. In my case I've cloned the project to <code>Documents/Personal/rathena</code>, so I've cd'ed to that folder. </p> </li> <li> <p>Then we can cd into <code>tools/docker</code> and then we can run the best command in the entire world <code>docker-compose up</code>. The very first time we do that command, it will pull the images from Docker hub and then build the server with the parameters specified in the <code>builder</code> service. </p> </li> <li> <p>If we observe the logs, we'll be able to see that the <code>rathena-builder</code> container is yielding a bunch of logs. If you ever compiled with <code>make</code> you'll find those familiar. </p> </li> <li> <p>After a while we can see that the compilation has finished once we see <code>rathena-builder exited with code 0</code>. </p> </li> <li> <p>Now all we need to do is press <code>ctrl+c</code> to stop everything and then <code>docker-compose up</code>. </p> </li> </ol> <p>And that's all there is to it. You've installed one thing on your host computer (a bit more if you count the depdencies to get docker runner) and now you have rAthena running. Once you stop the containers it will be like you never had rAthena running on your machine.</p>"},{"location":"installing/docker/#recompiling","title":"Recompiling","text":"<p>If you make changes to the rAthena src directory, you will need to recompile to apply those changes.</p> <ol> <li> <p>Stop everything by pressing <code>ctrl+c</code> if you haven't dettached with <code>docker-compose up -d</code>.</p> </li> <li> <p>Run <code>docker-compose run builder bash</code>.</p> </li> </ol> <p>This will start the builder container and give you access to its terminal, and from there you can run <code>make</code> commands to build like within any other VPS. Eg:</p> <pre><code>./configure --enable-packetver=20220404 --enable-pre-re --whatever-other-parameter\nmake server\n</code></pre>"},{"location":"installing/docker/#additional-info","title":"Additional info","text":"<p>You can find some more info on the <code>tools/docker</code> README</p>"}]}